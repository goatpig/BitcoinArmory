SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

ADD_SUBDIRECTORY(chacha20poly1305)

SET(LIBARMORYCOMMON_INCLUDE_DIRECTORIES
    PUBLIC .
    PUBLIC hkdf
    PUBLIC lmdbpp
    PRIVATE bech32/ref/c++
    PRIVATE chacha20poly1305
    PUBLIC ${LIBBTC_INCLUDE_DIR}/src
    PUBLIC ${LIBBTC_INCLUDE_DIR}/include
    PUBLIC ${LIBBTC_INCLUDE_DIR}/src/secp256k1/include
    PUBLIC Signer
    PUBLIC Wallets
    PRIVATE Wallets/Accounts
    PRIVATE ${PROJECT_BINARY_DIR}/cppForSwig
    PUBLIC /usr/include
)

SET(LIBARMORYCOMMON_LINK_LIBRARIES
    chacha20poly1305
    ${LIBBTC_LIB}
    ${LMDB_LIB}
    ${LIBWEBSOCKETS_LIB}
    ${CAPNPROTO_LIB}
)

FILE(GLOB LIBARMORYCOMMON_SOURCES *.cpp)
FILE(GLOB BLOCKDB_SOURCES BlockchainDatabase/*.cpp)
FILE(GLOB ACCOUNTS_SOURCES Wallets/Accounts/*.cpp)
FILE(GLOB SEEDS_SOURCES Wallets/Seeds/*.cpp)
FILE(GLOB SIGNER_SOURCES Signer/*.cpp)
FILE(GLOB BRIDGE_SOURCES BridgeApi/*.cpp)

FILE(GLOB WALLETS_SOURCES Wallets/*.cpp)
LIST(APPEND WALLETS_SOURCES
    ${LIBBTC_INCLUDE_DIR}/src/trezor-crypto/bip39.c
    ${LIBBTC_INCLUDE_DIR}/src/trezor-crypto/pbkdf2.c
)

LIST(APPEND LIBARMORYCOMMON_SOURCES
    hkdf/hkdf.c
    lmdbpp/lmdbpp.cpp
    ${WALLETS_SOURCES}
    ${ACCOUNTS_SOURCES}
    ${SEEDS_SOURCES}
    ${SIGNER_SOURCES}
    ${BLOCKDB_SOURCES}
    gtest/NodeUnitTest.cpp
)

IF (ENABLE_TESTS)
    LIST(APPEND LIBARMORYCOMMON_SOURCES
        gtest/NodeUnitTest.cpp
    )
    ADD_DEFINITIONS(-DUNIT_TESTS)
ENDIF ()

IF (WIN32 OR MINGW)
    LIST(REMOVE_ITEM LIBARMORYCOMMON_SOURCES
        ${CMAKE_CURRENT_SOURCE_DIR}/SocketService_unix.cpp
    )
ELSE ()
    LIST(REMOVE_ITEM LIBARMORYCOMMON_SOURCES
        ${CMAKE_CURRENT_SOURCE_DIR}/SocketService_win32.cpp
    )
    SET(OS_SPECIFIC_LIBS gmp)
ENDIF ()

LIST(REMOVE_ITEM LIBARMORYCOMMON_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/old_not_very_good_tests.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/playground.cpp
)

SET(LIBARMORYCOMMON_COMPILE_DEFINITIONS
    PRIVATE
)

LIST(APPEND LIBARMORYCOMMON_INCLUDE_DIRECTORIES
    PUBLIC ${LIBWEBSOCKETS_INCLUDE_DIRS}
)

INCLUDE(CheckCXXSymbolExists)
find_package(PkgConfig)

## lws ##
check_cxx_symbol_exists(LWS_WITH_TLS lws_config.h LIBWEBSOCKETS_WITH_TLS)

IF (LIBWEBSOCKETS_WITH_TLS)
    SET(OS_SPECIFIC_LIBS ${OS_SPECIFIC_LIBS} ssl crypto)
ENDIF ()

check_cxx_symbol_exists(LWS_WITH_LIBUV lws_config.h LIBWEBSOCKETS_WITH_LIBUV)

IF (LIBWEBSOCKETS_WITH_LIBUV)
    pkg_check_modules(LIBUV REQUIRED libuv)

    LIST(APPEND LIBARMORYCOMMON_LINK_LIBRARIES
        ${LIBUV_LIBRARIES}
    )
ENDIF ()

check_cxx_symbol_exists(LWS_WITH_LIBEVENT lws_config.h LIBWEBSOCKETS_WITH_LIBEVENT)

IF (LIBWEBSOCKETS_WITH_LIBEVENT)
    pkg_check_modules(LIBEVENT REQUIRED libevent)

    LIST (APPEND LIBARMORYCOMMON_LINK_LIBRARIES
        ${LIBEVENT_LIBRARIES}
    )
ENDIF ()

check_cxx_symbol_exists(LWS_WITH_LIBCAP lws_config.h LIBWEBSOCKETS_WITH_LIBCAP)
IF (LIBWEBSOCKETS_WITH_LIBCAP)
    pkg_check_modules(LIBCAP REQUIRED libcap)

    LIST(APPEND LIBARMORYCOMMON_LINK_LIBRARIES
        ${LIBCAP_LIBRARIES}
    )
ENDIF ()

## capnproto ##
IF (CMAKE_TOOLCHAIN_FILE MATCHES vcpkg)
    find_package(capnp CONFIG REQUIRED)
    SET(CAPNP_LIBRARIES capnp kj)
ELSE ()
    pkg_check_modules(CAPNPROTO REQUIRED)
ENDIF ()

LIST(APPEND LIBARMORYCOMMON_INCLUDE_DIRECTORIES
    PRIVATE ${CAPNPROTO_INCLUDE_DIRS}
)

SET(CAPNPROTO_FILES
    BDV.capnp
    Bridge.capnp
    Signer.capnp
    Types.capnp
)

#compile capnp schemas
FIND_PROGRAM(CAPNP_EXECUTABLE capnp)
IF (NOT CAPNP_EXECUTABLE)
    MESSAGE(FATAL_ERROR "capnproto compiler 'capnp' not found")
ENDIF ()

SET(CAPNP_FILES ${PROJECT_BINARY_DIR}/cppForSwig/capnp)
FILE(MAKE_DIRECTORY ${CAPNP_FILES})

FOREACH(schema ${CAPNPROTO_FILES})
    SET(CAPNP_CC "${schema}.c++")
    ADD_CUSTOM_COMMAND(
        OUTPUT ${CAPNP_FILES}/${CAPNP_CC}
        COMMAND ${CAPNP_EXECUTABLE} compile --no-standard-import --import-path=/ucrt64/include --src-prefix=${CMAKE_CURRENT_SOURCE_DIR}/capnp -oc++\:capnp ${CMAKE_CURRENT_SOURCE_DIR}/capnp/${schema}
    )
    LIST(APPEND LIBARMORYCOMMON_SOURCES ${CAPNP_FILES}/${CAPNP_CC})
ENDFOREACH()

ADD_LIBRARY(ArmoryCommon
    STATIC
    ${LIBARMORYCOMMON_SOURCES}
)

TARGET_COMPILE_DEFINITIONS(ArmoryCommon
    PUBLIC __STDC_LIMIT_MACROS
    ${LIBARMORYCOMMON_COMPILE_DEFINITIONS}
)

TARGET_INCLUDE_DIRECTORIES(ArmoryCommon
    ${LIBARMORYCOMMON_INCLUDE_DIRECTORIES}
)

TARGET_LINK_LIBRARIES(ArmoryCommon
    ${LIBARMORYCOMMON_LINK_LIBRARIES}
)

SET(LIBARMORYCLI_SOURCES
    ArmoryConfig.cpp
    BDM_mainthread.cpp
    BDM_Server.cpp
    BIP150_151.cpp
    BIP15x_Handshake.cpp
    BitcoinP2P.cpp
    BlockDataViewer.cpp
    BtcWallet.cpp
    HistoryPager.cpp
    HttpMessage.cpp
    JSON_codec.cpp
    LedgerEntry.cpp
    nodeRPC.cpp
    Progress.cpp
    ScrAddrObj.cpp
    Server.cpp
    StringSockets.cpp
    ZeroConf.cpp
    gtest/NodeUnitTest.cpp
)

ADD_LIBRARY(ArmoryCLI
    STATIC
    ${LIBARMORYCLI_SOURCES}
)

TARGET_INCLUDE_DIRECTORIES(ArmoryCLI
    ${LIBARMORYCOMMON_INCLUDE_DIRECTORIES}
)

TARGET_LINK_LIBRARIES(ArmoryCLI
    ArmoryCommon
)

TARGET_COMPILE_DEFINITIONS(ArmoryCLI
    PUBLIC -D__STDC_LIMIT_MACROS
)

## armorydb ##
ADD_EXECUTABLE(ArmoryDB
    main.cpp
)

SET_TARGET_PROPERTIES(ArmoryDB
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
)

TARGET_INCLUDE_DIRECTORIES(ArmoryDB
    ${LIBARMORYCOMMON_INCLUDE_DIRECTORIES}
)

TARGET_LINK_LIBRARIES(ArmoryDB
    ArmoryCLI
    ${OS_SPECIFIC_LIBS}
    ${WINSOCK_LIB}
    capnp
    kj
)

INCLUDE(GNUInstallDirs)

INSTALL(TARGETS ArmoryDB DESTINATION ${CMAKE_INSTALL_BINDIR})

## cppbridge ##
ADD_EXECUTABLE(CppBridge
    BridgeAPI/BridgeMain.cpp
    BridgeAPI/BridgeSocket.cpp
    BridgeAPI/CppBridge.cpp
    BridgeAPI/PassphrasePrompt.cpp
    BridgeAPI/ProtoCommandParser.cpp
    BridgeAPI/WalletManager.cpp
)

SET_TARGET_PROPERTIES(CppBridge
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
)

TARGET_INCLUDE_DIRECTORIES(CppBridge
    ${LIBARMORYCOMMON_INCLUDE_DIRECTORIES}
)

TARGET_LINK_LIBRARIES(CppBridge
    ArmoryCommon
    ${OS_SPECIFIC_LIBS}
    ${WINSOCK_LIB}
    capnp
    kj
)

INSTALL(TARGETS CppBridge DESTINATION ${CMAKE_INSTALL_BINDIR})

## key manager ##
ADD_EXECUTABLE(BIP150KeyManager
    KeyManager.cpp
)

SET_TARGET_PROPERTIES(BIP150KeyManager
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
)

TARGET_INCLUDE_DIRECTORIES(BIP150KeyManager
    ${LIBARMORYCOMMON_INCLUDE_DIRECTORIES}
)

TARGET_LINK_LIBRARIES(BIP150KeyManager
    ArmoryCLI
    ${OS_SPECIFIC_LIBS}
    ${WINSOCK_LIB}
)

INSTALL(TARGETS BIP150KeyManager DESTINATION ${CMAKE_INSTALL_BINDIR})

## tests ##
OPTION(ENABLE_TESTS "build tests binaries" OFF)

IF (ENABLE_TESTS)
    ADD_SUBDIRECTORY(gtest)
ENDIF ()
